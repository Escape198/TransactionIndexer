from typing import List, Optional
from datetime import datetime

from sqlalchemy.orm import Session
from sqlalchemy import func, BigInteger

from app.models.transaction import Transaction


class TransactionQueryService:
    def __init__(self, db: Session):
        self.db = db

    def get_transactions(
        self,
        address: str,
        start_date: Optional[datetime] = None,
        end_date: Optional[datetime] = None,
        min_value: Optional[int] = None,
    ) -> List[Transaction]:
        query = self.db.query(Transaction).filter(
            (func.lower(Transaction.from_address) == address.lower()) |
            (func.lower(Transaction.to_address) == address.lower())
        )

        if start_date:
            query = query.filter(Transaction.timestamp >= start_date)
        if end_date:
            query = query.filter(Transaction.timestamp <= end_date)
        if min_value is not None:
            query = query.filter(
                func.cast(Transaction.value, BigInteger) >= min_value
            )

        return query.all()

    def delete_transactions(
        self,
        address: Optional[str] = None,
        start_block: Optional[int] = None,
        end_block: Optional[int] = None,
    ) -> int:
        query = self.db.query(Transaction)

        if address:
            query = query.filter(
                (func.lower(Transaction.from_address) == address.lower()) |
                (func.lower(Transaction.to_address) == address.lower())
            )
        if start_block is not None:
            query = query.filter(Transaction.block_number >= start_block)
        if end_block is not None:
            query = query.filter(Transaction.block_number <= end_block)

        deleted = query.delete(synchronize_session=False)
        self.db.commit()
        return deleted

    def get_stats(self, address: str):
        address_filter = (
            (func.lower(Transaction.from_address) == address.lower()) |
            (func.lower(Transaction.to_address) == address.lower())
        )

        count = self.db.query(func.count(Transaction.id)).filter(address_filter).scalar()

        total_value = self.db.query(
            func.sum(func.cast(Transaction.value, BigInteger))
        ).filter(address_filter).scalar()

        return {
            "transaction_count": count or 0,
            "total_value": str(total_value or 0)
        }
